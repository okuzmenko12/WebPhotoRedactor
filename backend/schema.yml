openapi: 3.0.3
info:
  title: FlexFi
  version: 1.0.0
  description: Web site for images upscaling, removing jpeg artifacts, removing backgrounds
    etc.
  contact:
    name: VentureX
    url: https://t.me/venture_xx
paths:
  /api/v1/auth/change_email/:
    post:
      operationId: auth_change_email_create
      description: |-
        Mixin for creating and sending tokenized email.

        This mixin provides methods for creating and sending tokens via email for
        various token types. Available token types are:
            - SignUp ['su']
            - Change email ['ce']
            - Password reset ['pr']

        Attributes:
            token_type (str): The token type to create.
            html_message_template (str): The path to the HTML message template.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeEmail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChangeEmail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChangeEmail'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeEmail'
          description: ''
  /api/v1/auth/change_email_confirm/{token}/{email}/:
    post:
      operationId: auth_change_email_confirm_create
      description: |-
        Mixin for creating and sending tokenized email.

        This mixin provides methods for creating and sending tokens via email for
        various token types. Available token types are:
            - SignUp ['su']
            - Change email ['ce']
            - Password reset ['pr']

        Attributes:
            token_type (str): The token type to create.
            html_message_template (str): The path to the HTML message template.
      parameters:
      - in: path
        name: email
        schema:
          type: string
        required: true
      - in: path
        name: token
        schema:
          type: string
        required: true
      tags:
      - auth
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/auth/change_password/:
    post:
      operationId: auth_change_password_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePassword'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChangePassword'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChangePassword'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangePassword'
          description: ''
  /api/v1/auth/confirm_email/{token}/{email}/:
    post:
      operationId: auth_confirm_email_create
      description: |-
        Mixin for creating and sending tokenized email.

        This mixin provides methods for creating and sending tokens via email for
        various token types. Available token types are:
            - SignUp ['su']
            - Change email ['ce']
            - Password reset ['pr']

        Attributes:
            token_type (str): The token type to create.
            html_message_template (str): The path to the HTML message template.
      parameters:
      - in: path
        name: email
        schema:
          type: string
        required: true
      - in: path
        name: token
        schema:
          type: string
        required: true
      tags:
      - auth
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/auth/password_reset/:
    post:
      operationId: auth_password_reset_create
      description: |-
        Mixin for creating and sending tokenized email.

        This mixin provides methods for creating and sending tokens via email for
        various token types. Available token types are:
            - SignUp ['su']
            - Change email ['ce']
            - Password reset ['pr']

        Attributes:
            token_type (str): The token type to create.
            html_message_template (str): The path to the HTML message template.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendPasswordResetMail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendPasswordResetMail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendPasswordResetMail'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendPasswordResetMail'
          description: ''
  /api/v1/auth/password_reset/{token}/{email}/:
    post:
      operationId: auth_password_reset_create_2
      description: |-
        Mixin for creating and sending tokenized email.

        This mixin provides methods for creating and sending tokens via email for
        various token types. Available token types are:
            - SignUp ['su']
            - Change email ['ce']
            - Password reset ['pr']

        Attributes:
            token_type (str): The token type to create.
            html_message_template (str): The path to the HTML message template.
      parameters:
      - in: path
        name: email
        schema:
          type: string
        required: true
      - in: path
        name: token
        schema:
          type: string
        required: true
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordReset'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordReset'
          description: ''
  /api/v1/auth/registration/:
    post:
      operationId: auth_registration_create
      description: |-
        Mixin for creating and sending tokenized email.

        This mixin provides methods for creating and sending tokens via email for
        various token types. Available token types are:
            - SignUp ['su']
            - Change email ['ce']
            - Password reset ['pr']

        Attributes:
            token_type (str): The token type to create.
            html_message_template (str): The path to the HTML message template.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Registration'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Registration'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Registration'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registration'
          description: ''
  /api/v1/auth/token/:
    post:
      operationId: auth_token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/v1/auth/token/blacklist/:
    post:
      operationId: auth_token_blacklist_create
      description: |-
        Takes a token and blacklists it. Must be used with the
        `rest_framework_simplejwt.token_blacklist` app installed.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenBlacklist'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenBlacklist'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenBlacklist'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenBlacklist'
          description: ''
  /api/v1/auth/token/refresh/:
    post:
      operationId: auth_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/v1/auth/token/verify/:
    post:
      operationId: auth_token_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerify'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
  /api/v1/auth/user/:
    get:
      operationId: auth_user_retrieve
      tags:
      - auth
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: auth_user_update
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: auth_user_partial_update
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: auth_user_destroy
      tags:
      - auth
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/images/remove_bg/:
    post:
      operationId: images_remove_bg_create
      tags:
      - images
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Image'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Image'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
          description: ''
  /api/v1/images/remove_jpeg_artifacts/:
    post:
      operationId: images_remove_jpeg_artifacts_create
      tags:
      - images
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Image'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Image'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
          description: ''
  /api/v1/images/upscale/:
    post:
      operationId: images_upscale_create
      tags:
      - images
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Image'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Image'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
          description: ''
  /api/v1/subscriptions/all/:
    get:
      operationId: subscriptions_all_list
      tags:
      - payments
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plan'
          description: ''
  /api/v1/subscriptions/cancel/{subscription_pk}/:
    post:
      operationId: subscriptions_cancel_create
      parameters:
      - in: path
        name: subscription_pk
        schema:
          type: integer
        required: true
      tags:
      - payments
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/subscriptions/paypal/create_user_subscription/:
    post:
      operationId: subscriptions_paypal_create_user_subscription_create
      tags:
      - payments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserSubscription'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateUserSubscription'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateUserSubscription'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserSubscription'
          description: ''
  /api/v1/subscriptions/stripe/config/:
    get:
      operationId: subscriptions_stripe_config_retrieve
      tags:
      - payments
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/subscriptions/stripe/create_checkout_session/{plan_pk}/:
    post:
      operationId: subscriptions_stripe_create_checkout_session_create
      parameters:
      - in: path
        name: plan_pk
        schema:
          type: integer
        required: true
      tags:
      - payments
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/subscriptions/stripe/webhook/:
    post:
      operationId: subscriptions_stripe_webhook_create
      tags:
      - payments
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
components:
  schemas:
    ChangeEmail:
      type: object
      properties:
        email:
          type: string
          format: email
          writeOnly: true
          title: New E-mail
      required:
      - email
    ChangePassword:
      type: object
      properties:
        old_password:
          type: string
        new_password:
          type: string
        new_password_confirm:
          type: string
          title: New password confirmation
      required:
      - new_password
      - new_password_confirm
      - old_password
    CreateUserSubscription:
      type: object
      properties:
        subscription_id:
          type: string
          maxLength: 250
      required:
      - subscription_id
    Image:
      type: object
      properties:
        ip_address:
          type: string
          title: IP Address (not required)
          maxLength: 25
        image:
          type: string
          format: uri
      required:
      - image
    PasswordReset:
      type: object
      properties:
        password:
          type: string
          writeOnly: true
        password1:
          type: string
          writeOnly: true
      required:
      - password
      - password1
    PatchedUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          maxLength: 250
        email:
          type: string
          format: email
          readOnly: true
        full_name:
          type: string
          maxLength: 250
    Plan:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Plan name
          maxLength: 250
        description:
          type: string
          maxLength: 15000
        price:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          title: Price in $
        up_scales_count:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        period_in_months:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          title: Period in months (required)
        period_in_str:
          type: string
          readOnly: true
        bg_deletions_count:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          title: Background deletions count
        jpg_artifacts_deletions_count:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          title: JPEG artifacts deletions count
        stripe_price_id:
          type: string
          nullable: true
          maxLength: 5000
        paypal_plan_id:
          type: string
          nullable: true
          maxLength: 350
      required:
      - description
      - id
      - name
      - period_in_months
      - period_in_str
      - price
    Registration:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          writeOnly: true
        password1:
          type: string
          writeOnly: true
      required:
      - email
      - password
      - password1
    SendPasswordResetMail:
      type: object
      properties:
        email:
          type: string
          format: email
          writeOnly: true
      required:
      - email
    TokenBlacklist:
      type: object
      properties:
        refresh:
          type: string
          writeOnly: true
      required:
      - refresh
    TokenObtainPair:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - email
      - password
      - refresh
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
      - token
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          maxLength: 250
        email:
          type: string
          format: email
          readOnly: true
        full_name:
          type: string
          maxLength: 250
      required:
      - email
      - id
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
